package org.metacity.metacity.util.server;

import org.bukkit.ChatColor;
import org.bukkit.command.CommandSender;
import org.bukkit.entity.Player;
import org.bukkit.util.Consumer;
import org.metacity.metacity.MetaCity;
import org.metacity.metacity.player.MetaPlayer;
import org.metacity.util.CC;

import java.util.function.BiConsumer;
import java.util.function.Supplier;

public enum Translation {

    COMMAND_API_BADUSAGE(Lang.COMMAND_API_BADUSAGE, Lang::getString),
    COMMAND_API_USAGE(Lang.COMMAND_API_USAGE, Lang::getString, "usage"),
    COMMAND_API_REQUIREMENTS_INVALIDPLAYER(Lang.COMMAND_API_REQUIREMENTS_INVALIDPLAYER, Lang::getString),
    COMMAND_API_REQUIREMENTS_INVALIDCONSOLE(Lang.COMMAND_API_REQUIREMENTS_INVALIDCONSOLE, Lang::getString),
    COMMAND_API_REQUIREMENTS_INVALIDREMOTE(Lang.COMMAND_API_REQUIREMENTS_INVALIDREMOTE, Lang::getString),
    COMMAND_API_REQUIREMENTS_INVALIDBLOCK(Lang.COMMAND_API_REQUIREMENTS_INVALIDBLOCK, Lang::getString),
    COMMAND_API_REQUIREMENTS_NOPERMISSION(Lang.COMMAND_API_REQUIREMENTS_NOPERMISSION, Lang::getString),

    COMMAND_ROOT_DESCRIPTION(Lang.COMMAND_ROOT_DESCRIPTION, Lang::getString),
    COMMAND_ROOT_DETAILS(Lang.COMMAND_ROOT_DESCRIPTION, Lang::getString, "plugin", "version", "command"),

    COMMAND_BALANCE_DESCRIPTION(Lang.COMMAND_BALANCE_DESCRIPTION, Lang::getString),
    COMMAND_BALANCE_WALLETADDRESS(Lang.COMMAND_BALANCE_WALLETADDRESS, Lang::getString,"wallet"),
    COMMAND_BALANCE_IDENTITYID(Lang.COMMAND_BALANCE_IDENTITYID, Lang::getString, "id"),
    COMMAND_BALANCE_ENJBALANCE(Lang.COMMAND_BALANCE_ENJBALANCE, Lang::getString, "balance"),
    COMMAND_BALANCE_ETHBALANCE(Lang.COMMAND_BALANCE_ETHBALANCE, Lang::getString, "balance"),
    COMMAND_BALANCE_TOKENDISPLAY(Lang.COMMAND_BALANCE_TOKENDISPLAY, Lang::getString, "name", "amount"),
    COMMAND_BALANCE_NOTOKENS(Lang.COMMAND_BALANCE_NOTOKENS, Lang::getString),
    COMMAND_BALANCE_TOKENCOUNT(Lang.COMMAND_BALANCE_TOKENCOUNT, Lang::getString, "amount"),

    COMMAND_HELP_DESCRIPTION(Lang.COMMAND_HELP_DESCRIPTION, Lang::getString),

    COMMAND_LINK_DESCRIPTION(Lang.COMMAND_LINK_DESCRIPTION, Lang::getString),
    COMMAND_LINK_NULLWALLET(Lang.COMMAND_LINK_NULLWALLET, Lang::getString),
    COMMAND_LINK_SHOWWALLET(Lang.COMMAND_LINK_SHOWWALLET, Lang::getString, "wallet"),
    COMMAND_LINK_NULLCODE(Lang.COMMAND_LINK_NULLCODE, Lang::getString),
    COMMAND_LINK_INSTRUCTIONS_1(Lang.COMMAND_LINK_INSTRUCTIONS_1, Lang::getString),
    COMMAND_LINK_INSTRUCTIONS_2(Lang.COMMAND_LINK_INSTRUCTIONS_2, Lang::getString),
    COMMAND_LINK_INSTRUCTIONS_3(Lang.COMMAND_LINK_INSTRUCTIONS_3, Lang::getString),
    COMMAND_LINK_INSTRUCTIONS_4(Lang.COMMAND_LINK_INSTRUCTIONS_4, Lang::getString),
    COMMAND_LINK_INSTRUCTIONS_5(Lang.COMMAND_LINK_INSTRUCTIONS_5, Lang::getString),
    COMMAND_LINK_INSTRUCTIONS_6(Lang.COMMAND_LINK_INSTRUCTIONS_6, Lang::getString),
    COMMAND_LINK_INSTRUCTIONS_7(Lang.COMMAND_LINK_INSTRUCTIONS_7, Lang::getString, "code"),
    COMMAND_LINK_SUCCESS(Lang.COMMAND_LINK_SUCCESS, Lang::getString, "wallet"),

    COMMAND_DEVSEND_DESCRIPTION(Lang.COMMAND_DEVSEND_DESCRIPTION, Lang::getString),
    COMMAND_DEVSEND_INVALIDAMOUNT(Lang.COMMAND_DEVSEND_INVALIDAMOUNT, Lang::getString),
    COMMAND_DEVSEND_INVALIDTOKEN(Lang.COMMAND_DEVSEND_INVALIDTOKEN, Lang::getString),

    COMMAND_SEND_DESCRIPTION(Lang.COMMAND_SEND_DESCRIPTION, Lang::getString),
    COMMAND_SEND_SUBMITTED(Lang.COMMAND_SEND_SUBMITTED, Lang::getString),
    COMMAND_SEND_MUSTHOLDITEM(Lang.COMMAND_SEND_MUSTHOLDITEM, Lang::getString),
    COMMAND_SEND_ITEMNOTTOKEN(Lang.COMMAND_SEND_ITEMNOTTOKEN, Lang::getString),
    COMMAND_SEND_DOESNOTHAVETOKEN(Lang.COMMAND_SEND_DOESNOTHAVETOKEN, Lang::getString),

    COMMAND_TOKEN_DESCRIPTION(Lang.COMMAND_TOKEN_DESCRIPTION, Lang::getString),
    COMMAND_TOKEN_CREATE_DESCRIPTION(Lang.COMMAND_TOKEN_CREATE_DESCRIPTION, Lang::getString),
    COMMAND_TOKEN_CREATE_SUCCESS(Lang.COMMAND_TOKEN_CREATE_SUCCESS, Lang::getString),
    COMMAND_TOKEN_CREATE_FAILED(Lang.COMMAND_TOKEN_CREATE_FAILED, Lang::getString),
    COMMAND_TOKEN_CREATE_DUPLICATE(Lang.COMMAND_TOKEN_CREATE_DUPLICATE, Lang::getString),
    COMMAND_TOKEN_CREATENFT_DESCRIPTION(Lang.COMMAND_TOKEN_CREATENFT_DESCRIPTION, Lang::getString),
    COMMAND_TOKEN_CREATENFT_BASEFAILED(Lang.COMMAND_TOKEN_CREATENFT_BASEFAILED, Lang::getString),
    COMMAND_TOKEN_CREATENFT_DUPLICATE(Lang.COMMAND_TOKEN_CREATENFT_DUPLICATE, Lang::getString),
    COMMAND_TOKEN_CREATENFT_REPLACENICKNAME(Lang.COMMAND_TOKEN_CREATENFT_REPLACENICKNAME, Lang::getString),
    COMMAND_TOKEN_CREATENFT_MISSINGBASE(Lang.COMMAND_TOKEN_CREATENFT_MISSINGBASE, Lang::getString),
    COMMAND_TOKEN_UPDATE_DESCRIPTION(Lang.COMMAND_TOKEN_UPDATE_DESCRIPTION, Lang::getString),
    COMMAND_TOKEN_UPDATE_SUCCESS(Lang.COMMAND_TOKEN_UPDATE_SUCCESS, Lang::getString),
    COMMAND_TOKEN_UPDATE_FAILED(Lang.COMMAND_TOKEN_UPDATE_FAILED, Lang::getString),
    COMMAND_TOKEN_DELETE_DESCRIPTION(Lang.COMMAND_TOKEN_DELETE_DESCRIPTION, Lang::getString),
    COMMAND_TOKEN_DELETE_SUCCESS(Lang.COMMAND_TOKEN_DELETE_SUCCESS, Lang::getString),
    COMMAND_TOKEN_DELETE_FAILED(Lang.COMMAND_TOKEN_DELETE_FAILED, Lang::getString),
    COMMAND_TOKEN_DELETE_BASENFT_1(Lang.COMMAND_TOKEN_DELETE_BASENFT_1, Lang::getString),
    COMMAND_TOKEN_DELETE_BASENFT_2(Lang.COMMAND_TOKEN_DELETE_BASENFT_2, Lang::getString),
    COMMAND_TOKEN_TOINV_DESCRIPTION(Lang.COMMAND_TOKEN_TOINV_DESCRIPTION, Lang::getString),
    COMMAND_TOKEN_TOINV_SUCCESS(Lang.COMMAND_TOKEN_TOINV_SUCCESS, Lang::getString),
    COMMAND_TOKEN_TOINV_FAILED(Lang.COMMAND_TOKEN_TOINV_FAILED, Lang::getString),
    COMMAND_TOKEN_NICKNAME_DESCRIPTION(Lang.COMMAND_TOKEN_NICKNAME_DESCRIPTION, Lang::getString),
    COMMAND_TOKEN_NICKNAME_SUCCESS(Lang.COMMAND_TOKEN_NICKNAME_SUCCESS, Lang::getString),
    COMMAND_TOKEN_NICKNAME_DUPLICATE(Lang.COMMAND_TOKEN_NICKNAME_DUPLICATE, Lang::getString),
    COMMAND_TOKEN_NICKNAME_HAS(Lang.COMMAND_TOKEN_NICKNAME_HAS, Lang::getString),
    COMMAND_TOKEN_NICKNAME_INVALID(Lang.COMMAND_TOKEN_NICKNAME_INVALID, Lang::getString),
    COMMAND_TOKEN_ADDPERM_DESCRIPTION(Lang.COMMAND_TOKEN_ADDPERM_DESCRIPTION, Lang::getString),
    COMMAND_TOKEN_ADDPERM_PERMADDED(Lang.COMMAND_TOKEN_ADDPERM_PERMADDED, Lang::getString),
    COMMAND_TOKEN_ADDPERM_PERMREJECTED(Lang.COMMAND_TOKEN_ADDPERM_PERMREJECTED, Lang::getString),
    COMMAND_TOKEN_ADDPERM_DUPLICATEPERM(Lang.COMMAND_TOKEN_ADDPERM_DUPLICATEPERM, Lang::getString),
    COMMAND_TOKEN_ADDPERMNFT_DESCRIPTION(Lang.COMMAND_TOKEN_ADDPERMNFT_DESCRIPTION, Lang::getString),
    COMMAND_TOKEN_REVOKEPERM_DESCRIPTION(Lang.COMMAND_TOKEN_REVOKEPERM_DESCRIPTION, Lang::getString),
    COMMAND_TOKEN_REVOKEPERM_PERMREVOKED(Lang.COMMAND_TOKEN_REVOKEPERM_PERMREVOKED, Lang::getString),
    COMMAND_TOKEN_REVOKEPERM_PERMNOTONTOKEN(Lang.COMMAND_TOKEN_REVOKEPERM_PERMNOTONTOKEN, Lang::getString),
    COMMAND_TOKEN_REVOKEPERMNFT_DESCRIPTION(Lang.COMMAND_TOKEN_REVOKEPERMNFT_DESCRIPTION, Lang::getString),
    COMMAND_TOKEN_PERM_ISGLOBAL(Lang.COMMAND_TOKEN_PERM_ISGLOBAL, Lang::getString),
    COMMAND_TOKEN_GETURI_DESCRIPTION(Lang.COMMAND_TOKEN_GETURI_DESCRIPTION, Lang::getString),
    COMMAND_TOKEN_GETURI_SUCCESS(Lang.COMMAND_TOKEN_GETURI_SUCCESS, Lang::getString),
    COMMAND_TOKEN_GETURI_FAILED(Lang.COMMAND_TOKEN_GETURI_FAILED, Lang::getString),
    COMMAND_TOKEN_GETURI_EMPTY_1(Lang.COMMAND_TOKEN_GETURI_EMPTY_1, Lang::getString),
    COMMAND_TOKEN_GETURI_EMPTY_2(Lang.COMMAND_TOKEN_GETURI_EMPTY_2, Lang::getString),
    COMMAND_TOKEN_REMOVEURI_DESCRIPTION(Lang.COMMAND_TOKEN_REMOVEURI_DESCRIPTION, Lang::getString),
    COMMAND_TOKEN_REMOVEURI_SUCCESS(Lang.COMMAND_TOKEN_REMOVEURI_SUCCESS, Lang::getString),
    COMMAND_TOKEN_REMOVEURI_FAILED(Lang.COMMAND_TOKEN_REMOVEURI_FAILED, Lang::getString),
    COMMAND_TOKEN_REMOVEURI_EMPTY(Lang.COMMAND_TOKEN_REMOVEURI_EMPTY, Lang::getString),
    COMMAND_TOKEN_SETWALLETVIEW_DESCRIPTION(Lang.COMMAND_TOKEN_SETWALLETVIEW_DESCRIPTION, Lang::getString),
    COMMAND_TOKEN_SETWALLETVIEW_INVALIDVIEW(Lang.COMMAND_TOKEN_SETWALLETVIEW_INVALIDVIEW, Lang::getString),
    COMMAND_TOKEN_SETWALLETVIEW_HAS(Lang.COMMAND_TOKEN_SETWALLETVIEW_HAS, Lang::getString),
    COMMAND_TOKEN_LIST_DESCRIPTION(Lang.COMMAND_TOKEN_LIST_DESCRIPTION, Lang::getString),
    COMMAND_TOKEN_LIST_EMPTY(Lang.COMMAND_TOKEN_LIST_EMPTY, Lang::getString),
    COMMAND_TOKEN_LIST_HEADER_TOKENS(Lang.COMMAND_TOKEN_LIST_HEADER_TOKENS, Lang::getString),
    COMMAND_TOKEN_LIST_HEADER_NONFUNGIBLE(Lang.COMMAND_TOKEN_LIST_HEADER_NONFUNGIBLE, Lang::getString),
    COMMAND_TOKEN_EXPORT_DESCRIPTION(Lang.COMMAND_TOKEN_EXPORT_DESCRIPTION, Lang::getString),
    COMMAND_TOKEN_EXPORT_COMPLETE(Lang.COMMAND_TOKEN_EXPORT_COMPLETE, Lang::getString),
    COMMAND_TOKEN_EXPORT_SUCCESS(Lang.COMMAND_TOKEN_EXPORT_SUCCESS, Lang::getString),
    COMMAND_TOKEN_EXPORT_EMPTY(Lang.COMMAND_TOKEN_EXPORT_EMPTY, Lang::getString),
    COMMAND_TOKEN_EXPORT_FAILED(Lang.COMMAND_TOKEN_EXPORT_FAILED, Lang::getString),
    COMMAND_TOKEN_EXPORT_PARTIAL(Lang.COMMAND_TOKEN_EXPORT_PARTIAL, Lang::getString),
    COMMAND_TOKEN_IMPORT_DESCRIPTION(Lang.COMMAND_TOKEN_IMPORT_DESCRIPTION, Lang::getString),
    COMMAND_TOKEN_IMPORT_COMPLETE(Lang.COMMAND_TOKEN_IMPORT_COMPLETE, Lang::getString),
    COMMAND_TOKEN_IMPORT_SUCCESS(Lang.COMMAND_TOKEN_IMPORT_SUCCESS, Lang::getString),
    COMMAND_TOKEN_IMPORT_EMPTY(Lang.COMMAND_TOKEN_IMPORT_EMPTY, Lang::getString),
    COMMAND_TOKEN_IMPORT_FAILED(Lang.COMMAND_TOKEN_IMPORT_FAILED, Lang::getString),
    COMMAND_TOKEN_IMPORT_PARTIAL(Lang.COMMAND_TOKEN_IMPORT_PARTIAL, Lang::getString),
    COMMAND_TOKEN_NOSUCHTOKEN(Lang.COMMAND_TOKEN_NOSUCHTOKEN, Lang::getString),
    COMMAND_TOKEN_NOHELDITEM(Lang.COMMAND_TOKEN_NOHELDITEM, Lang::getString),
    COMMAND_TOKEN_INVALIDFULLID(Lang.COMMAND_TOKEN_INVALIDFULLID, Lang::getString),
    COMMAND_TOKEN_INVALIDID(Lang.COMMAND_TOKEN_INVALIDID, Lang::getString),
    COMMAND_TOKEN_INVALIDDATA(Lang.COMMAND_TOKEN_INVALIDDATA, Lang::getString),
    COMMAND_TOKEN_ISFUNGIBLE(Lang.COMMAND_TOKEN_ISFUNGIBLE, Lang::getString),
    COMMAND_TOKEN_ISNONFUNGIBLE(Lang.COMMAND_TOKEN_ISNONFUNGIBLE, Lang::getString),
    COMMAND_TOKEN_ISNONFUNGIBLEINSTANCE(Lang.COMMAND_TOKEN_ISNONFUNGIBLEINSTANCE, Lang::getString),
    COMMAND_TOKEN_MUSTPASSINDEX(Lang.COMMAND_TOKEN_MUSTPASSINDEX, Lang::getString),

    COMMAND_TRADE_DESCRIPTION(Lang.COMMAND_TRADE_DESCRIPTION, Lang::getString),
    COMMAND_TRADE_INVITE_DESCRIPTION(Lang.COMMAND_TRADE_INVITE_DESCRIPTION, Lang::getString),
    COMMAND_TRADE_ACCEPT_DESCRIPTION(Lang.COMMAND_TRADE_ACCEPT_DESCRIPTION, Lang::getString),
    COMMAND_TRADE_DECLINE_DESCRIPTION(Lang.COMMAND_TRADE_DECLINE_DESCRIPTION, Lang::getString),
    COMMAND_TRADE_NOOPENINVITE(Lang.COMMAND_TRADE_NOOPENINVITE, Lang::getString, "player"),
    COMMAND_TRADE_DECLINED_SENDER(Lang.COMMAND_TRADE_DECLINED_SENDER, Lang::getString, "player"),
    COMMAND_TRADE_DECLINED_TARGET(Lang.COMMAND_TRADE_DECLINED_TARGET, Lang::getString, "player"),
    COMMAND_TRADE_ALREADYINVITED(Lang.COMMAND_TRADE_ALREADYINVITED, Lang::getString, "player"),
    COMMAND_TRADE_WANTSTOTRADE(Lang.COMMAND_TRADE_WANTSTOTRADE, Lang::getString, "player"),
    COMMAND_TRADE_INVITESENT(Lang.COMMAND_TRADE_INVITESENT, Lang::getString, "player"),
    COMMAND_TRADE_INVITEDTOTRADE(Lang.COMMAND_TRADE_INVITEDTOTRADE, Lang::getString, "player"),
    COMMAND_TRADE_CONFIRM_ACTION(Lang.COMMAND_TRADE_CONFIRM_ACTION, Lang::getString),
    COMMAND_TRADE_CONFIRM_WAIT(Lang.COMMAND_TRADE_CONFIRM_WAIT, Lang::getString),
    COMMAND_TRADE_COMPLETE(Lang.COMMAND_TRADE_COMPLETE, Lang::getString),

    COMMAND_QR_DESCRIPTION(Lang.COMMAND_QR_DESCRIPTION, Lang::getString),
    COMMAND_QR_ALREADYLINKED(Lang.COMMAND_QR_ALREADYLINKED, Lang::getString),
    COMMAND_QR_INVENTORYFULL(Lang.COMMAND_QR_INVENTORYFULL, Lang::getString),
    COMMAND_QR_CODENOTLOADED(Lang.COMMAND_QR_CODENOTLOADED, Lang::getString),
    COMMAND_QR_ERROR(Lang.COMMAND_QR_ERROR, Lang::getString),

    COMMAND_UNLINK_DESCRIPTION(Lang.COMMAND_UNLINK_DESCRIPTION, Lang::getString),
    COMMAND_UNLINK_SUCCESS(Lang.COMMAND_UNLINK_SUCCESS, Lang::getString),

    COMMAND_WALLET_DESCRIPTION(Lang.COMMAND_WALLET_DESCRIPTION, Lang::getString),

    HINT_LINK(Lang.HINT_LINK, Lang::getString),

    IDENTITY_NOTLOADED(Lang.IDENTITY_NOTLOADED, Lang::getString),

    ERRORS_EXCEPTION(Lang.ERRORS_EXCEPTION, Lang::getString, "error"),
    ERRORS_CHOOSEOTHERPLAYER(Lang.ERRORS_CHOOSEOTHERPLAYER, Lang::getString),
    ERRORS_INVALIDPLAYERNAME(Lang.ERRORS_INVALIDPLAYERNAME, Lang::getString, "player"),
    ERRORS_PLAYERNOTONLINE(Lang.ERRORS_PLAYERNOTONLINE, Lang::getString, "player"),
    ERRORS_PLAYERNOTREGISTERED(Lang.ERRORS_PLAYERNOTREGISTERED, Lang::getString, "player"),

    QR_DISPLAYNAME(Lang.QR_DISPLAYNAME, Lang::getString),

    WALLET_UI_FUNGIBLE(Lang.WALLET_UI_FUNGIBLE, Lang::getString),
    WALLET_UI_NONFUNGIBLE(Lang.WALLET_UI_NONFUNGIBLE, Lang::getString),
    WALLET_NOTLINKED_SELF(Lang.WALLET_NOTLINKED_SELF, Lang::getString),
    WALLET_NOTLINKED_OTHER(Lang.WALLET_NOTLINKED_OTHER, Lang::getString, "player"),
    WALLET_ALLOWANCENOTSET(Lang.WALLET_ALLOWANCENOTSET, Lang::getString),
    WALLET_NOTENOUGHETH(Lang.WALLET_NOTENOUGHETH, Lang::getString),
    WALLET_OTHERNOTENOUGHETH(Lang.WALLET_OTHERNOTENOUGHETH, Lang::getString, "player");

    private final Lang lang;
    private final String[] replacing;
    private final Content content;

    Translation(Lang lang, Content content, String... replacing) {
        this.lang = lang;
        this.content = content;
        this.replacing = replacing;
    }

    public String translation(String... toReplace) {
        String s = content.accept(lang, LangConfig.EN_US);
        if (toReplace.length != replacing.length)
            throw new IllegalStateException("Not replacing all variables for lang " + LangConfig.EN_US.prettyName() + ": " + lang.path());
        for (int i = 0; i < toReplace.length; i++) {
            s = s.replace("%" + replacing[i] + "%", toReplace[i]);
        }
        return CC.translate('&', s);
    }

    public void send(MetaPlayer p, String... toReplace) {
        p.player().ifPresent(pl -> pl.sendMessage(translation(toReplace)));
    }

    public void send(Player p, String... toReplace) {
        MetaCity.getInstance().getPlayerManager().getPlayer(p).ifPresent(m -> send(m, toReplace));
    }

    public void send(CommandSender s, String... toReplace) {
        if (s instanceof Player) {
            send((Player) s, toReplace);
            return;
        }
        s.sendMessage(translation(toReplace));
    }

    @FunctionalInterface
    private interface Content {

        String accept(Lang lang, LangConfig config);

    }

}
